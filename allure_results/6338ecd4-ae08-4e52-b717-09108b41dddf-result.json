{"name": "test_home", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"cart-qty\">...</span> is not clickable at point (1092, 2). Other element would receive the click: <div id=\"bar-notification\" class=\"bar-notification success\" style=\"display: block;\">...</div>\n  (Session info: chrome=131.0.6778.140)\nStacktrace:\n\tGetHandleVerifier [0x00B134A3+25059]\n\t(No symbol) [0x00A9CEA4]\n\t(No symbol) [0x0097BEC3]\n\t(No symbol) [0x009C5D37]\n\t(No symbol) [0x009C4189]\n\t(No symbol) [0x009C1DAD]\n\t(No symbol) [0x009C10AF]\n\t(No symbol) [0x009B5FD7]\n\t(No symbol) [0x009E1EFC]\n\t(No symbol) [0x009B5A24]\n\t(No symbol) [0x009E2194]\n\t(No symbol) [0x009FB51E]\n\t(No symbol) [0x009E1C96]\n\t(No symbol) [0x009B3FAC]\n\t(No symbol) [0x009B4F3D]\n\tGetHandleVerifier [0x00E05613+3113811]\n\tGetHandleVerifier [0x00E1A2DA+3199002]\n\tGetHandleVerifier [0x00E12AB2+3168242]\n\tGetHandleVerifier [0x00BB3310+680016]\n\t(No symbol) [0x00AA57ED]\n\t(No symbol) [0x00AA2A98]\n\t(No symbol) [0x00AA2C35]\n\t(No symbol) [0x00A95890]\n\tBaseThreadInitThunk [0x777FFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]", "trace": "self = <test.test_new_home_afterlogin.TestHomeAfterLogin object at 0x000002257127F110>\n\n    def test_home(self):\n        self.home.click_login_home()\n        self.home.send_email()\n        self.home.send_password()\n        self.home.click_remember()\n        self.home.click_login()\n        self.home.click_book()\n        self.home.click_addcart()\n>       self.home.click_cartlabel()\n\ntest_new_home_afterlogin.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\new_home_after_login.py:63: in click_cartlabel\n    self.driver.find_element(By.XPATH, self.cartlabel).click()\n..\\..\\SeleniumFramework\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\SeleniumFramework\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\n..\\..\\SeleniumFramework\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000225703F5510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"cart-qty\">...</span> is not clickable at point (1092, 2). Other element would receive the click: <div id=\"bar-notification\" class=\"bar-notification success\" style=\"display: block;\">...</div>\nE         (Session info: chrome=131.0.6778.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00B134A3+25059]\nE       \t(No symbol) [0x00A9CEA4]\nE       \t(No symbol) [0x0097BEC3]\nE       \t(No symbol) [0x009C5D37]\nE       \t(No symbol) [0x009C4189]\nE       \t(No symbol) [0x009C1DAD]\nE       \t(No symbol) [0x009C10AF]\nE       \t(No symbol) [0x009B5FD7]\nE       \t(No symbol) [0x009E1EFC]\nE       \t(No symbol) [0x009B5A24]\nE       \t(No symbol) [0x009E2194]\nE       \t(No symbol) [0x009FB51E]\nE       \t(No symbol) [0x009E1C96]\nE       \t(No symbol) [0x009B3FAC]\nE       \t(No symbol) [0x009B4F3D]\nE       \tGetHandleVerifier [0x00E05613+3113811]\nE       \tGetHandleVerifier [0x00E1A2DA+3199002]\nE       \tGetHandleVerifier [0x00E12AB2+3168242]\nE       \tGetHandleVerifier [0x00BB3310+680016]\nE       \t(No symbol) [0x00AA57ED]\nE       \t(No symbol) [0x00AA2A98]\nE       \t(No symbol) [0x00AA2C35]\nE       \t(No symbol) [0x00A95890]\nE       \tBaseThreadInitThunk [0x777FFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]\n\n..\\..\\SeleniumFramework\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "start": 1734080680494, "stop": 1734080696663, "uuid": "8cbe5a0e-a317-4868-8163-f4948ec1fa59", "historyId": "1d6242fc1de06beeae4e1f1295a226ba", "testCaseId": "08997dd1110cb032efeb0abf63a051dc", "fullName": "test_new_home_afterlogin.TestHomeAfterLogin#test_home", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setUp')"}, {"name": "suite", "value": "test_new_home_afterlogin"}, {"name": "subSuite", "value": "TestHomeAfterLogin"}, {"name": "host", "value": "IB-SEZ-LAP-1042"}, {"name": "thread", "value": "14496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_new_home_afterlogin"}]}